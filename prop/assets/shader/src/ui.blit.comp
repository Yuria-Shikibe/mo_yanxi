#pragma shader_stage(compute)

#include "lib/blend.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

restrict layout (binding = 0, rgba32f) uniform readonly image2D in_base;
restrict layout (binding = 1, rgba32f) uniform readonly image2D in_light;
restrict layout (binding = 2, rgba32f) uniform readonly image2D in_background;

restrict layout (binding = 3, rgba32f) uniform image2D out_base;
restrict layout (binding = 4, rgba32f) uniform image2D out_light;

layout(set = 0, binding = 5) uniform UBO{
    uvec2 offset;
    uvec2 cap;
}ubo;


vec4 applyShadow(vec4 shadowColor, vec4 baseColor) {
    float shadowIntensity = shadowColor.a;
    vec3 darkenedRGB = mix(shadowColor.rgb, shadowColor.rgb, shadowIntensity);
    vec4 darkenedColor = vec4(darkenedRGB * baseColor.rgb, baseColor.a);

    return darkenedColor;
}

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy + ubo.offset);

    vec4 color_background_src = imageLoad(in_background, pos);
    //TODO make alpha ctrlable by using blend and clear color?

    vec4 shadow1 = vec4(color_background_src.rgb, color_background_src.a * .65f);
    vec4 shadow2 = vec4(color_background_src.rgb, color_background_src.a * .9f);

    vec4 color_base_src = imageLoad(in_base, pos);
    vec4 color_light_src = imageLoad(in_light, pos);

    vec4 color_base_dst  = blend(shadow1, imageLoad(out_base, pos));
    vec4 color_light_dst = blend(shadow2, imageLoad(out_light, pos));

    imageStore(out_base, pos, blend(blend2(color_base_src, shadow1), color_base_dst));
    imageStore(out_light, pos, blend2(color_light_src, color_light_dst));
}
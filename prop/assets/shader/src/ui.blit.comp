#pragma shader_stage(compute)

#include "lib/blend.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0) uniform sampler2D in_base;
layout (binding = 1) uniform sampler2D in_light;
layout (binding = 2) uniform sampler2D in_background;

restrict layout (binding = 3, rgba32f) uniform image2D out_base;
restrict layout (binding = 4, rgba32f) uniform image2D out_light;


vec4 applyShadow(vec4 baseColor, vec4 shadowColor) {
    float shadowIntensity = shadowColor.a;
    vec3 darkenedRGB = mix(vec3(1.f), shadowColor.rgb, shadowIntensity);
    vec4 darkenedColor = vec4(darkenedRGB * baseColor.rgb, baseColor.a);

    return darkenedColor;
}

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
//    vec2 uv = (vec2(pos) + vec2(0.5f, 0.5f)) / vec2(imageSize(outputImageGeneral));

    vec4 color_base_src = texelFetch(in_base, pos, 0);
    vec4 color_base_dst = imageLoad(out_base, pos);

    vec4 color_light_src = texelFetch(in_light, pos, 0);
    vec4 color_light_dst = imageLoad(out_light, pos);
    //TODO
    imageStore(out_base, pos, blend(color_base_src, color_base_dst));
    imageStore(out_light, pos, blend(color_light_src, color_light_dst));

//    imageStore(out_base, pos, blend2(generalSrcColor, applyShadow(generalDstColor, backgroundSrcColor)));
//    imageStore(out_light, pos, alphaBlend(backgroundSrcColor, backgroundDstColor));
//    imageStore(outputImageBase, pos, baseSrcColor);
}
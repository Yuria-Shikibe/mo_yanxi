#pragma shader_stage(compute)
#extension GL_ARB_separate_shader_objects : enable

#include "lib/multisample.glsl"

#define MaxImageCount 3

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform Info{
    int sample_count;
} ubo;

layout (set = 0, binding = 1) uniform sampler2DMS input_image[MaxImageCount];
layout (set = 0, binding = 2, rgba32f) restrict uniform image2D output_image[MaxImageCount];

vec4 blend(vec4 src, vec4 dst) {
    vec4 result = vec4(src.rgb * src.a + dst.rgb * (1 - src.a) * dst.a, src.a + (1 - src.a) * dst.a);
    return result;
}

void main() {

    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    uint idx = gl_GlobalInvocationID.z;

    vec4 avg_color = resolve_samples(ubo.sample_count, pos, input_image[idx]);

    vec4 last = imageLoad(output_image[idx], pos);
    imageStore(output_image[idx], pos, blend(avg_color, last));
//    imageStore(output_image[idx], pos, vec4(1));
}

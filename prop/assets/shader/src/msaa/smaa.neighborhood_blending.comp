#pragma shader_stage(compute)

#include "smaa.preset.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) restrict uniform writeonly image2D target;


layout (set = 0, binding = 1) uniform sampler2D inputColorTex;
layout (set = 0, binding = 2) uniform sampler2D inputBlendTex;

vec4 SMAANeighborhoodBlendingPS(vec2 texcoord,
                                vec4 offset,
                                sampler2D colorTex,
                                sampler2D blendTex,
                                vec2 inv
//#if SMAA_REPROJECTION
//                                  , SMAATexture2D(velocityTex)
//#endif
) {
    // Fetch the blending weights for current pixel:
    vec4 a;
    a.x = texture(blendTex, offset.xy).a; // Right
    a.y = texture(blendTex, offset.zw).g; // Top
    a.wz = texture(blendTex, texcoord).xz; // Bottom / Left

    // Is there any blending weight with a value greater than 0.0?

    if (dot(a, vec4(1.0, 1.0, 1.0, 1.0)) < 1e-5) {
        vec4 color = SMAASampleLevelZero(colorTex, texcoord);

        #if SMAA_REPROJECTION
        vec2 velocity = SMAA_DECODE_VELOCITY(SMAASampleLevelZero(velocityTex, texcoord));

        // Pack velocity into the alpha channel:
        color.a = sqrt(5.0 * length(velocity));
        #endif

        return color;
    } else {
        bool h = max(a.x, a.z) > max(a.y, a.w); // max(horizontal) > max(vertical)

        // Calculate the blending offsets:
        vec4 blendingOffset = vec4(0.0, a.y, 0.0, a.w);
        vec2 blendingWeight = a.yw;
        SMAAMovc(bvec4(h, h, h, h), blendingOffset, vec4(a.x, 0.0, a.z, 0.0));
        SMAAMovc(bvec2(h, h), blendingWeight, a.xz);
        blendingWeight /= dot(blendingWeight, vec2(1.0, 1.0));

        // Calculate the texture coordinates:
        vec4 blendingCoord = fma(blendingOffset, vec4(inv.xy, -inv.xy), texcoord.xyxy);

        // We exploit bilinear filtering to mix current pixel with the chosen
        // neighbor:
        vec4 color = blendingWeight.x * SMAASampleLevelZero(colorTex, blendingCoord.xy);
        color += blendingWeight.y * SMAASampleLevelZero(colorTex, blendingCoord.zw);

        #if SMAA_REPROJECTION
        // Antialias velocity for proper reprojection in a later stage:
        vec2 velocity = blendingWeight.x * SMAA_DECODE_VELOCITY(SMAASampleLevelZero(velocityTex, blendingCoord.xy));
        velocity += blendingWeight.y * SMAA_DECODE_VELOCITY(SMAASampleLevelZero(velocityTex, blendingCoord.zw));

        // Pack velocity into the alpha channel:
        color.a = sqrt(5.0 * length(velocity));
        #endif

        return color;
    }
}

void main() {
    const ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    const vec2 inv = vec2(1) / vec2(imageSize(target));
    const vec2 texC = (vec2(pos) + vec2(0.5f, 0.5f));
    const vec2 uv = texC * inv;

    vec4 offset = mad(inv.xyxy, float4(1.0, 0.0, 0.0, 1.0), uv.xyxy);

    vec4 rst = SMAANeighborhoodBlendingPS(uv, offset, inputColorTex, inputBlendTex, inv);
    imageStore(target, pos, rst);
}
#pragma shader_stage(compute)
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform sampler2D input_image;
layout (set = 0, binding = 1) uniform sampler2D down_mipmap_sample;
layout (set = 0, binding = 2) uniform sampler2D up_mipmap_sample;
layout (set = 0, binding = 3, rgba16f) restrict uniform writeonly image2D target;


layout (set = 0, binding = 4) uniform Kernal{
    uint mip_index;
    uint align_cap0;
    uint total_layer;
    float scale;
    float strength_src;
    float strength_dst;
    float align_cap1;
    float align_cap2;
} ubo;

const uint INDEX_MASK = ~(uint(~0) >> 1);

const vec3 tent_kernal[9] = {
    vec3(-1,  1, 1), vec3(0,  1, 2), vec3(1,  1, 1),
    vec3(-1,  0, 2), vec3(0,  0, 4), vec3(1,  0, 2),
    vec3(-1, -1, 1), vec3(0, -1, 2), vec3(1, -1, 1)
};

float luma(const vec4 color){
    return dot(vec3(0.2126f, 0.7152f, 0.0722f), color.rgb) * color.a;
}

bool up_sampling(const uint mip_index){
    return (mip_index & INDEX_MASK) != 0;
}

vec4 sample_input(const vec2 where, const uint raw_mip_index){
    bool isUpScale = up_sampling(raw_mip_index);
    int index = int(raw_mip_index & ~INDEX_MASK);
    if(isUpScale){
        if(raw_mip_index == ubo.total_layer - 1){
            return textureLod(down_mipmap_sample, where, ubo.total_layer - 1);
        }else{
            return textureLod(up_mipmap_sample, where, index + 1);
        }
    }else{
        if(raw_mip_index == 0){
            return textureLod(input_image, where, 0);
        }else{
            return textureLod(down_mipmap_sample, where, index - 1);
        }
    }

}

vec4 blur(const vec2 where, const vec2 size_inv, const float scale, const uint raw_mip_index){
    vec4 color = vec4(0);
    float weight = 0;

    for(int i = 0; i < 9; ++i){
        vec3 ker = vec3(tent_kernal[i]);
        vec4 sampled = sample_input(where + ker.xy * scale * size_inv, raw_mip_index);
        float l = raw_mip_index == 0 ? ker.z / (1 + luma(sampled)) : ker.z;
        color += sampled * l;
        weight += l;
    }

    return color /= weight;
}

vec4 screen(vec4 src, vec4 dst) {
    vec3 color = 1.0 - (1.0 - src.rgb) * (1.0 - dst.rgb);
    vec4 scr = vec4(color, (src.a + dst.a) * .65f);
    return mix(src + dst, scr, 0.65f);
}

void main() {
    const int current_index = int(ubo.mip_index & ~INDEX_MASK);
    const int div = 1 << (current_index + int(current_index < ubo.total_layer) - 1);

    const vec2 size_inv = vec2(1) / vec2(imageSize(target));

    const ivec2 mipPos = ivec2(gl_GlobalInvocationID.xy);
    const vec2 uv = (vec2(mipPos) + vec2(0.5f, 0.5f)) * size_inv;

    const bool upSacling = up_sampling(ubo.mip_index);

    //const float approach = (current_index + 1) / ubo.total_layer;
    //const float lastMix = 0.25f * (0.5f + 0.5f * approach);

    if(upSacling){
        vec4 colorSrc;

        const vec4 colorDst = blur(uv, size_inv / 2, ubo.scale, current_index);
        if(current_index == ubo.total_layer - 1){
            colorSrc = textureLod(down_mipmap_sample, uv, ubo.total_layer - 1);
        }else{
            colorSrc = textureLod(up_mipmap_sample, uv, current_index + 1);
        }

        //vec4 last = imageLoad(target, mipPos);
        const vec4 src = screen(vec4(colorSrc.rgb * ubo.strength_src, colorSrc.a), vec4(colorDst.rgb * ubo.strength_dst, colorDst.a));
        imageStore(target, mipPos, src);
    }else{
        //const vec4 last = imageLoad(target, mipPos);
        const vec4 src = blur(uv, size_inv * 2, ubo.scale, ubo.mip_index);

        imageStore(target, mipPos, src);
    }
}
